<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    <!-- 自动扫描，没有这个配置的话，容器初始化时cacheBean中的configService就不能从上下文中取出 -->
    <context:component-scan base-package="com.cn.wubin" />

    <!-- 引入配置文件 -->
    <bean id="ResourceConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true" />
    </bean>

    <!-- BasicDataSource提供了close()方法关闭数据源，
         所以必须设定destroy-method=”close”属性，以便Spring容器关闭时，数据源能够正常关闭 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}" />
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}" />
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}" />
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件
         使用SqlSessionFactoryBean来代替SqlSessionFactoryBuilder创建SqlSessionFactory，
         然后可以使用下面两种方式使用sqlSession：
         1、SqlSessionTemplate（一个实现了SqlSession接口的SqlSessionTemplate实现类）
         2、SqlSessionDaoSupport（是一个抽象的支持类, 用来为你提供 SqlSession，调用 getSqlSession()方法你会得到一个SqlSessionTemplate）
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/cn/wubin/mappers/*.xml" />
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类
         MapperScannerConfigurer 将会创建 MapperFactoryBean,之后自动装配，然后创建代理然后注入到spring中，自动扫描数据映射器接口，生成代理类、并注入到Spring的容器中；
         在spring.xml中需要配置所有的dao层实现，把sqlSession或者sqlSessionFactory注入进去
         所有常见的CRUD方法实现：一般的做法是写一个baseDao，把所有常见的CRUD方法实现，然后每个业务模块的dao去继承该baseDao
         dao层我们继承了SqlSessionDaoSupport，所以可以直接使用getSqlSession() 方法获取sqlSessionTemplate，然后操作数据映射文件（mapper文件）里的sql了
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cn.wubin.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- redis 读取redis.properties连接redis-->
    <bean id="redisClient" class="com.cn.wubin.redis.impl.ShardedJedisClientImpl">
        <constructor-arg name="host" value="${redis-ip}"/>
        <constructor-arg name="port" value="${redis-port}"/>
        <constructor-arg name="passwd" value="${redis-passwd}"/>
    </bean>

    <bean id="cacheInitBean" class="com.cn.wubin.cache.CacheInitBean" />
</beans>